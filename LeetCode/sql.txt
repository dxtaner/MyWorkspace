Replace Employee ID With The Unique Identifier

SELECT 
    e.name AS name,
    eu.unique_id AS unique_id
FROM 
    Employees e
LEFT JOIN 
    EmployeeUNI eu ON e.id = eu.id
ORDER BY 
    e.id;


Recyclable and Low Fat Products
select product_id from products where low_fats="Y" and recyclable="Y"

Find Customer Referee
SELECT A.name
FROM Customer  A
LEFT JOIN Customer B ON A.referee_id = B.id
WHERE B.id IS NULL OR B.id != 2;

Big Countries
SELECT name, population, area
FROM World
WHERE area >= 3000000 OR population >= 25000000;

Product Sales Analysis I
SELECT 
    p.product_name,
    s.year,
    s.price
FROM 
    Sales s
JOIN 
    Product p ON s.product_id = p.product_id
ORDER BY 
    p.product_name, 
    s.year;

Views Table 
SELECT DISTINCT v1.author_id AS id
FROM Views v1
JOIN Views v2 ON v1.author_id = v2.viewer_id AND v1.article_id = v2.article_id
WHERE v1.author_id = v1.viewer_id
ORDER BY id ASC;

Invalid Tweets
SELECT tweet_id FROM Tweets WHERE LENGTH(content) > 15;

Not Boring Movies
SELECT id, movie, description, rating
FROM Cinema
WHERE id % 2 = 1 AND description != 'boring'
ORDER BY rating DESC;


Project Employees I
SELECT 
    p.project_id,
    ROUND(AVG(e.experience_years), 2) AS average_years
FROM 
    Project p
JOIN 
    Employee e ON p.employee_id = e.employee_id
GROUP BY 
    p.project_id
ORDER BY 
    p.project_id;


Percentage of Users Attended a Contest
SELECT 
    r.contest_id,
    ROUND((COUNT(r.user_id) / (SELECT COUNT(DISTINCT user_id) FROM Register WHERE contest_id = r.contest_id) * 100), 2) AS percentage
FROM 
    Register r
GROUP BY 
    r.contest_id
ORDER BY 
    percentage DESC, 
    r.contest_id;


Average Time of Process per Machine
SELECT machine_id, 
       ROUND(AVG(end_time - start_time), 3) AS processing_time
FROM (
    SELECT machine_id, 
           process_id, 
           MAX(CASE WHEN activity_type = 'end' THEN timestamp END) AS end_time,
           MAX(CASE WHEN activity_type = 'start' THEN timestamp END) AS start_time
    FROM Activity
    GROUP BY machine_id, process_id
) AS activity_timesy
GROUP BY machine_id;

Employee Bonus
SELECT E.name, B.bonus
FROM Employee E
LEFT JOIN Bonus B ON E.empId = B.empId
WHERE B.bonus IS NULL OR B.bonus < 1000;


RankedSalaries 
WITH RankedSalaries AS (
    SELECT
        e.id AS employee_id,
        e.name AS employee,
        e.salary,
        e.departmentId,
        DENSE_RANK() OVER (PARTITION BY e.departmentId ORDER BY e.salary DESC) AS salary_rank
    FROM Employee e
)
SELECT
    d.name AS Department,
    r.employee,
    r.salary
FROM Department d
JOIN RankedSalaries r ON d.id = r.departmentId
WHERE r.salary_rank <= 3;

Group Sold Products By The Date
SELECT 
    sell_date,
    COUNT(DISTINCT product) AS num_sold,
    GROUP_CONCAT(DISTINCT product ORDER BY product) AS products
FROM Activities
GROUP BY sell_date
ORDER BY sell_date;

Fix Names in a Table
SELECT 
    user_id,
    CONCAT(UPPER(SUBSTRING(name, 1, 1)), LOWER(SUBSTRING(name, 2))) AS name
FROM Users
ORDER BY user_id;

Managers with at Least 5 Direct Reports
SELECT name
FROM Employee
WHERE id IN (
    SELECT managerId
    FROM Employee
    GROUP BY managerId
    HAVING COUNT(id) >= 5
);

Triangle Judgement
SELECT
    x,
    y,
    z,
    CASE
        WHEN x + y > z AND y + z > x AND x + z > y THEN 'Yes'
        ELSE 'No'
    END AS triangle
FROM
    Triangle;

Product Sales Analysis III
SELECT s.product_id, 
       s.year AS first_year, 
       s.quantity, 
       s.price 
FROM Sales s
JOIN (
    SELECT product_id, MIN(year) AS first_year
    FROM Sales
    GROUP BY product_id
) first_year_sales ON s.product_id = first_year_sales.product_id
                  AND s.year = first_year_sales.first_year;
